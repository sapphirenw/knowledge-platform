// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    name
) VALUES (
    $1
)
RETURNING id, name, datastore, created_at, updated_at
`

// CreateCustomer
//
//	INSERT INTO customer (
//	    name
//	) VALUES (
//	    $1
//	)
//	RETURNING id, name, datastore, created_at, updated_at
func (q *Queries) CreateCustomer(ctx context.Context, name string) (*Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, name)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createDocument = `-- name: CreateDocument :one
INSERT INTO document (
    parent_id, customer_id, filename, type, size_bytes, sha_256
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at
`

type CreateDocumentParams struct {
	ParentID   pgtype.Int8 `db:"parent_id" json:"parentId"`
	CustomerID int64       `db:"customer_id" json:"customerId"`
	Filename   string      `db:"filename" json:"filename"`
	Type       string      `db:"type" json:"type"`
	SizeBytes  int64       `db:"size_bytes" json:"sizeBytes"`
	Sha256     string      `db:"sha_256" json:"sha256"`
}

// CreateDocument
//
//	INSERT INTO document (
//	    parent_id, customer_id, filename, type, size_bytes, sha_256
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6
//	)
//	RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at
func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (*Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.ParentID,
		arg.CustomerID,
		arg.Filename,
		arg.Type,
		arg.SizeBytes,
		arg.Sha256,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
	)
	return &i, err
}

const createFolder = `-- name: CreateFolder :one
INSERT INTO folder (
    parent_id, customer_id, title
) VALUES (
    $1, $2, $3
)
RETURNING id, parent_id, customer_id, title, created_at, updated_at
`

type CreateFolderParams struct {
	ParentID   pgtype.Int8 `db:"parent_id" json:"parentId"`
	CustomerID int64       `db:"customer_id" json:"customerId"`
	Title      string      `db:"title" json:"title"`
}

// CreateFolder
//
//	INSERT INTO folder (
//	    parent_id, customer_id, title
//	) VALUES (
//	    $1, $2, $3
//	)
//	RETURNING id, parent_id, customer_id, title, created_at, updated_at
func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (*Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.ParentID, arg.CustomerID, arg.Title)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createFolderRoot = `-- name: CreateFolderRoot :one
INSERT INTO folder (
    customer_id, title
) VALUES (
    $1, 'root'
)
RETURNING id, parent_id, customer_id, title, created_at, updated_at
`

// CreateFolderRoot
//
//	INSERT INTO folder (
//	    customer_id, title
//	) VALUES (
//	    $1, 'root'
//	)
//	RETURNING id, parent_id, customer_id, title, created_at, updated_at
func (q *Queries) CreateFolderRoot(ctx context.Context, customerID int64) (*Folder, error) {
	row := q.db.QueryRow(ctx, createFolderRoot, customerID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createTokenUsage = `-- name: CreateTokenUsage :one
INSERT INTO token_usage (
    id, customer_id, model, input_tokens, output_tokens, total_tokens
) VALUES (
    $1, $2, $3, $4, $5, $6
)
ON CONFLICT (id)
DO UPDATE SET
    customer_id = EXCLUDED.customer_id,
    model = EXCLUDED.model,
    input_tokens = EXCLUDED.input_tokens,
    output_tokens = EXCLUDED.output_tokens,
    total_tokens = EXCLUDED.total_tokens
RETURNING id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at
`

type CreateTokenUsageParams struct {
	ID           pgtype.UUID `db:"id" json:"id"`
	CustomerID   int64       `db:"customer_id" json:"customerId"`
	Model        string      `db:"model" json:"model"`
	InputTokens  int32       `db:"input_tokens" json:"inputTokens"`
	OutputTokens int32       `db:"output_tokens" json:"outputTokens"`
	TotalTokens  int32       `db:"total_tokens" json:"totalTokens"`
}

// CreateTokenUsage
//
//	INSERT INTO token_usage (
//	    id, customer_id, model, input_tokens, output_tokens, total_tokens
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6
//	)
//	ON CONFLICT (id)
//	DO UPDATE SET
//	    customer_id = EXCLUDED.customer_id,
//	    model = EXCLUDED.model,
//	    input_tokens = EXCLUDED.input_tokens,
//	    output_tokens = EXCLUDED.output_tokens,
//	    total_tokens = EXCLUDED.total_tokens
//	RETURNING id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at
func (q *Queries) CreateTokenUsage(ctx context.Context, arg CreateTokenUsageParams) (*TokenUsage, error) {
	row := q.db.QueryRow(ctx, createTokenUsage,
		arg.ID,
		arg.CustomerID,
		arg.Model,
		arg.InputTokens,
		arg.OutputTokens,
		arg.TotalTokens,
	)
	var i TokenUsage
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Model,
		&i.InputTokens,
		&i.OutputTokens,
		&i.TotalTokens,
		&i.CreatedAt,
	)
	return &i, err
}

const createVector = `-- name: CreateVector :one
INSERT INTO vector_store (
    raw, embeddings, customer_id, document_id, index
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, raw, embeddings, customer_id, document_id, index, created_at
`

type CreateVectorParams struct {
	Raw        string          `db:"raw" json:"raw"`
	Embeddings pgvector.Vector `db:"embeddings" json:"embeddings"`
	CustomerID int64           `db:"customer_id" json:"customerId"`
	DocumentID int64           `db:"document_id" json:"documentId"`
	Index      int32           `db:"index" json:"index"`
}

// CreateVector
//
//	INSERT INTO vector_store (
//	    raw, embeddings, customer_id, document_id, index
//	) VALUES (
//	    $1, $2, $3, $4, $5
//	)
//	RETURNING id, raw, embeddings, customer_id, document_id, index, created_at
func (q *Queries) CreateVector(ctx context.Context, arg CreateVectorParams) (*VectorStore, error) {
	row := q.db.QueryRow(ctx, createVector,
		arg.Raw,
		arg.Embeddings,
		arg.CustomerID,
		arg.DocumentID,
		arg.Index,
	)
	var i VectorStore
	err := row.Scan(
		&i.ID,
		&i.Raw,
		&i.Embeddings,
		&i.CustomerID,
		&i.DocumentID,
		&i.Index,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

// DeleteCustomer
//
//	DELETE FROM customer
//	WHERE id = $1
func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, datastore, created_at, updated_at FROM customer
WHERE id = $1 LIMIT 1
`

// GetCustomer
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetCustomer(ctx context.Context, id int64) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCustomerByName = `-- name: GetCustomerByName :one
SELECT id, name, datastore, created_at, updated_at FROM customer
WHERE name = $1 LIMIT 1
`

// GetCustomerByName
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	WHERE name = $1 LIMIT 1
func (q *Queries) GetCustomerByName(ctx context.Context, name string) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByName, name)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
WHERE id = $1 LIMIT 1
`

// GetDocument
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetDocument(ctx context.Context, id int64) (*Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
	)
	return &i, err
}

const getDocumentsByCustomer = `-- name: GetDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
WHERE customer_id = $1 AND validated = true
`

// GetDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
//	WHERE customer_id = $1 AND validated = true
func (q *Queries) GetDocumentsByCustomer(ctx context.Context, customerID int64) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsFromParent = `-- name: GetDocumentsFromParent :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
where parent_id = $1 and validated = true
`

// GetDocumentsFromParent
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
//	where parent_id = $1 and validated = true
func (q *Queries) GetDocumentsFromParent(ctx context.Context, parentID pgtype.Int8) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsFromParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFolder = `-- name: GetFolder :one
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE id = $1 LIMIT 1
`

// GetFolder
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetFolder(ctx context.Context, id int64) (*Folder, error) {
	row := q.db.QueryRow(ctx, getFolder, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFolderWithName = `-- name: GetFolderWithName :one
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1 AND title = $2
LIMIT 1
`

type GetFolderWithNameParams struct {
	CustomerID int64  `db:"customer_id" json:"customerId"`
	Title      string `db:"title" json:"title"`
}

// GetFolderWithName
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1 AND title = $2
//	LIMIT 1
func (q *Queries) GetFolderWithName(ctx context.Context, arg GetFolderWithNameParams) (*Folder, error) {
	row := q.db.QueryRow(ctx, getFolderWithName, arg.CustomerID, arg.Title)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFoldersByCustomer = `-- name: GetFoldersByCustomer :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1
`

// GetFoldersByCustomer
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1
func (q *Queries) GetFoldersByCustomer(ctx context.Context, customerID int64) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFoldersFromParent = `-- name: GetFoldersFromParent :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE parent_id = $1
`

// GetFoldersFromParent
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE parent_id = $1
func (q *Queries) GetFoldersFromParent(ctx context.Context, parentID pgtype.Int8) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersFromParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootDocumentsByCustomer = `-- name: GetRootDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
WHERE customer_id = $1 AND parent_id is NULL
`

// GetRootDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
//	WHERE customer_id = $1 AND parent_id is NULL
func (q *Queries) GetRootDocumentsByCustomer(ctx context.Context, customerID int64) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getRootDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootFoldersByCustomer = `-- name: GetRootFoldersByCustomer :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1 AND parent_id IS NULL
`

// GetRootFoldersByCustomer
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1 AND parent_id IS NULL
func (q *Queries) GetRootFoldersByCustomer(ctx context.Context, customerID int64) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getRootFoldersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenUsage = `-- name: GetTokenUsage :many
SELECT id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at FROM token_usage
WHERE customer_id = $1
`

// GetTokenUsage
//
//	SELECT id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at FROM token_usage
//	WHERE customer_id = $1
func (q *Queries) GetTokenUsage(ctx context.Context, customerID int64) ([]*TokenUsage, error) {
	rows, err := q.db.Query(ctx, getTokenUsage, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TokenUsage
	for rows.Next() {
		var i TokenUsage
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Model,
			&i.InputTokens,
			&i.OutputTokens,
			&i.TotalTokens,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnvalidatedDocumentsByCustomer = `-- name: GetUnvalidatedDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
WHERE customer_id = $1 AND validated = false
`

// GetUnvalidatedDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at FROM document
//	WHERE customer_id = $1 AND validated = false
func (q *Queries) GetUnvalidatedDocumentsByCustomer(ctx context.Context, customerID int64) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getUnvalidatedDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVector = `-- name: GetVector :one
SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
WHERE id = $1
`

// GetVector
//
//	SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
//	WHERE id = $1
func (q *Queries) GetVector(ctx context.Context, id int64) (*VectorStore, error) {
	row := q.db.QueryRow(ctx, getVector, id)
	var i VectorStore
	err := row.Scan(
		&i.ID,
		&i.Raw,
		&i.Embeddings,
		&i.CustomerID,
		&i.DocumentID,
		&i.Index,
		&i.CreatedAt,
	)
	return &i, err
}

const getVectorsByCustomer = `-- name: GetVectorsByCustomer :many
SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
WHERE customer_id = $1
`

// GetVectorsByCustomer
//
//	SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
//	WHERE customer_id = $1
func (q *Queries) GetVectorsByCustomer(ctx context.Context, customerID int64) ([]*VectorStore, error) {
	rows, err := q.db.Query(ctx, getVectorsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*VectorStore
	for rows.Next() {
		var i VectorStore
		if err := rows.Scan(
			&i.ID,
			&i.Raw,
			&i.Embeddings,
			&i.CustomerID,
			&i.DocumentID,
			&i.Index,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVectorsByDocument = `-- name: GetVectorsByDocument :many
SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
WHERE document_id = $1
`

// GetVectorsByDocument
//
//	SELECT id, raw, embeddings, customer_id, document_id, index, created_at FROM vector_store
//	WHERE document_id = $1
func (q *Queries) GetVectorsByDocument(ctx context.Context, documentID int64) ([]*VectorStore, error) {
	rows, err := q.db.Query(ctx, getVectorsByDocument, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*VectorStore
	for rows.Next() {
		var i VectorStore
		if err := rows.Scan(
			&i.ID,
			&i.Raw,
			&i.Embeddings,
			&i.CustomerID,
			&i.DocumentID,
			&i.Index,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, datastore, created_at, updated_at FROM customer
ORDER BY name
`

// ListCustomers
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	ORDER BY name
func (q *Queries) ListCustomers(ctx context.Context) ([]*Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Datastore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDocumentAsUploaded = `-- name: MarkDocumentAsUploaded :one
UPDATE document
SET validated = true
WHERE id = $1
RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at
`

// MarkDocumentAsUploaded
//
//	UPDATE document
//	SET validated = true
//	WHERE id = $1
//	RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at
func (q *Queries) MarkDocumentAsUploaded(ctx context.Context, id int64) (*Document, error) {
	row := q.db.QueryRow(ctx, markDocumentAsUploaded, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
	)
	return &i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
    set name = $2
WHERE id = $1
RETURNING id, name, datastore, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

// UpdateCustomer
//
//	UPDATE customer
//	    set name = $2
//	WHERE id = $1
//	RETURNING id, name, datastore, created_at, updated_at
func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer, arg.ID, arg.Name)
	return err
}
