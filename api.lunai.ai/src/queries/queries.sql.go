// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    name
) VALUES (
    $1
)
RETURNING id, name, datastore, created_at, updated_at
`

// CreateCustomer
//
//	INSERT INTO customer (
//	    name
//	) VALUES (
//	    $1
//	)
//	RETURNING id, name, datastore, created_at, updated_at
func (q *Queries) CreateCustomer(ctx context.Context, name string) (*Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, name)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createDocument = `-- name: CreateDocument :one
INSERT INTO document (
    parent_id, customer_id, filename, type, size_bytes, sha_256
) VALUES (
    $1, $2, $3, $4, $5, $6
)
ON CONFLICT (customer_id, parent_id, filename) DO UPDATE
SET updated_at = CURRENT_TIMESTAMP
RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at
`

type CreateDocumentParams struct {
	ParentID   pgtype.UUID `db:"parent_id" json:"parentId"`
	CustomerID uuid.UUID   `db:"customer_id" json:"customerId"`
	Filename   string      `db:"filename" json:"filename"`
	Type       string      `db:"type" json:"type"`
	SizeBytes  int64       `db:"size_bytes" json:"sizeBytes"`
	Sha256     string      `db:"sha_256" json:"sha256"`
}

// CreateDocument
//
//	INSERT INTO document (
//	    parent_id, customer_id, filename, type, size_bytes, sha_256
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6
//	)
//	ON CONFLICT (customer_id, parent_id, filename) DO UPDATE
//	SET updated_at = CURRENT_TIMESTAMP
//	RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at
func (q *Queries) CreateDocument(ctx context.Context, arg *CreateDocumentParams) (*Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.ParentID,
		arg.CustomerID,
		arg.Filename,
		arg.Type,
		arg.SizeBytes,
		arg.Sha256,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createDocumentVector = `-- name: CreateDocumentVector :one
INSERT INTO document_vector (
    document_id, vector_store_id, customer_id, index
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, document_id, vector_store_id, customer_id, index, created_at
`

type CreateDocumentVectorParams struct {
	DocumentID    uuid.UUID `db:"document_id" json:"documentId"`
	VectorStoreID uuid.UUID `db:"vector_store_id" json:"vectorStoreId"`
	CustomerID    uuid.UUID `db:"customer_id" json:"customerId"`
	Index         int32     `db:"index" json:"index"`
}

// CreateDocumentVector
//
//	INSERT INTO document_vector (
//	    document_id, vector_store_id, customer_id, index
//	) VALUES (
//	    $1, $2, $3, $4
//	)
//	RETURNING id, document_id, vector_store_id, customer_id, index, created_at
func (q *Queries) CreateDocumentVector(ctx context.Context, arg *CreateDocumentVectorParams) (*DocumentVector, error) {
	row := q.db.QueryRow(ctx, createDocumentVector,
		arg.DocumentID,
		arg.VectorStoreID,
		arg.CustomerID,
		arg.Index,
	)
	var i DocumentVector
	err := row.Scan(
		&i.ID,
		&i.DocumentID,
		&i.VectorStoreID,
		&i.CustomerID,
		&i.Index,
		&i.CreatedAt,
	)
	return &i, err
}

const createFolder = `-- name: CreateFolder :one
INSERT INTO folder (
    parent_id, customer_id, title
) VALUES (
    $1, $2, $3
)
ON CONFLICT (customer_id, parent_id, title) DO UPDATE
SET updated_at = CURRENT_TIMESTAMP
RETURNING id, parent_id, customer_id, title, created_at, updated_at
`

type CreateFolderParams struct {
	ParentID   pgtype.UUID `db:"parent_id" json:"parentId"`
	CustomerID uuid.UUID   `db:"customer_id" json:"customerId"`
	Title      string      `db:"title" json:"title"`
}

// CreateFolder
//
//	INSERT INTO folder (
//	    parent_id, customer_id, title
//	) VALUES (
//	    $1, $2, $3
//	)
//	ON CONFLICT (customer_id, parent_id, title) DO UPDATE
//	SET updated_at = CURRENT_TIMESTAMP
//	RETURNING id, parent_id, customer_id, title, created_at, updated_at
func (q *Queries) CreateFolder(ctx context.Context, arg *CreateFolderParams) (*Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.ParentID, arg.CustomerID, arg.Title)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createFolderRoot = `-- name: CreateFolderRoot :one
INSERT INTO folder (
    customer_id, title
) VALUES (
    $1, 'root'
)
ON CONFLICT (customer_id, parent_id, title) DO UPDATE
SET updated_at = CURRENT_TIMESTAMP
RETURNING id, parent_id, customer_id, title, created_at, updated_at
`

// CreateFolderRoot
//
//	INSERT INTO folder (
//	    customer_id, title
//	) VALUES (
//	    $1, 'root'
//	)
//	ON CONFLICT (customer_id, parent_id, title) DO UPDATE
//	SET updated_at = CURRENT_TIMESTAMP
//	RETURNING id, parent_id, customer_id, title, created_at, updated_at
func (q *Queries) CreateFolderRoot(ctx context.Context, customerID uuid.UUID) (*Folder, error) {
	row := q.db.QueryRow(ctx, createFolderRoot, customerID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createTokenUsage = `-- name: CreateTokenUsage :one
INSERT INTO token_usage (
    id, customer_id, model, input_tokens, output_tokens, total_tokens
) VALUES (
    $1, $2, $3, $4, $5, $6
)
ON CONFLICT (id)
DO UPDATE SET
    customer_id = EXCLUDED.customer_id,
    model = EXCLUDED.model,
    input_tokens = EXCLUDED.input_tokens,
    output_tokens = EXCLUDED.output_tokens,
    total_tokens = EXCLUDED.total_tokens
RETURNING id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at
`

type CreateTokenUsageParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	CustomerID   uuid.UUID `db:"customer_id" json:"customerId"`
	Model        string    `db:"model" json:"model"`
	InputTokens  int32     `db:"input_tokens" json:"inputTokens"`
	OutputTokens int32     `db:"output_tokens" json:"outputTokens"`
	TotalTokens  int32     `db:"total_tokens" json:"totalTokens"`
}

// CreateTokenUsage
//
//	INSERT INTO token_usage (
//	    id, customer_id, model, input_tokens, output_tokens, total_tokens
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6
//	)
//	ON CONFLICT (id)
//	DO UPDATE SET
//	    customer_id = EXCLUDED.customer_id,
//	    model = EXCLUDED.model,
//	    input_tokens = EXCLUDED.input_tokens,
//	    output_tokens = EXCLUDED.output_tokens,
//	    total_tokens = EXCLUDED.total_tokens
//	RETURNING id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at
func (q *Queries) CreateTokenUsage(ctx context.Context, arg *CreateTokenUsageParams) (*TokenUsage, error) {
	row := q.db.QueryRow(ctx, createTokenUsage,
		arg.ID,
		arg.CustomerID,
		arg.Model,
		arg.InputTokens,
		arg.OutputTokens,
		arg.TotalTokens,
	)
	var i TokenUsage
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Model,
		&i.InputTokens,
		&i.OutputTokens,
		&i.TotalTokens,
		&i.CreatedAt,
	)
	return &i, err
}

const createVector = `-- name: CreateVector :one
INSERT INTO vector_store (
    raw, embeddings, customer_id
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type CreateVectorParams struct {
	Raw        string          `db:"raw" json:"raw"`
	Embeddings pgvector.Vector `db:"embeddings" json:"embeddings"`
	CustomerID uuid.UUID       `db:"customer_id" json:"customerId"`
}

// CreateVector
//
//	INSERT INTO vector_store (
//	    raw, embeddings, customer_id
//	) VALUES (
//	    $1, $2, $3
//	)
//	RETURNING id
func (q *Queries) CreateVector(ctx context.Context, arg *CreateVectorParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createVector, arg.Raw, arg.Embeddings, arg.CustomerID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createWebsite = `-- name: CreateWebsite :one
INSERT INTO website (
    customer_id, protocol, domain, blacklist, whitelist
) VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT ON CONSTRAINT cnst_unique_website
DO UPDATE SET
    updated_at = CURRENT_TIMESTAMP,
    blacklist = EXCLUDED.blacklist,
    whitelist = EXCLUDED.whitelist
RETURNING id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at
`

type CreateWebsiteParams struct {
	CustomerID uuid.UUID `db:"customer_id" json:"customerId"`
	Protocol   string    `db:"protocol" json:"protocol"`
	Domain     string    `db:"domain" json:"domain"`
	Blacklist  []string  `db:"blacklist" json:"blacklist"`
	Whitelist  []string  `db:"whitelist" json:"whitelist"`
}

// CreateWebsite
//
//	INSERT INTO website (
//	    customer_id, protocol, domain, blacklist, whitelist
//	) VALUES (
//	    $1, $2, $3, $4, $5
//	)
//	ON CONFLICT ON CONSTRAINT cnst_unique_website
//	DO UPDATE SET
//	    updated_at = CURRENT_TIMESTAMP,
//	    blacklist = EXCLUDED.blacklist,
//	    whitelist = EXCLUDED.whitelist
//	RETURNING id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at
func (q *Queries) CreateWebsite(ctx context.Context, arg *CreateWebsiteParams) (*Website, error) {
	row := q.db.QueryRow(ctx, createWebsite,
		arg.CustomerID,
		arg.Protocol,
		arg.Domain,
		arg.Blacklist,
		arg.Whitelist,
	)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Protocol,
		&i.Domain,
		&i.Blacklist,
		&i.Whitelist,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createWebsitePage = `-- name: CreateWebsitePage :one
INSERT INTO website_page (
    customer_id, website_id, url, sha_256
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT ON CONSTRAINT cnst_unique_website_page
DO UPDATE SET
    updated_at = CURRENT_TIMESTAMP,
    is_valid = TRUE
RETURNING id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at
`

type CreateWebsitePageParams struct {
	CustomerID uuid.UUID `db:"customer_id" json:"customerId"`
	WebsiteID  uuid.UUID `db:"website_id" json:"websiteId"`
	Url        string    `db:"url" json:"url"`
	Sha256     string    `db:"sha_256" json:"sha256"`
}

// CreateWebsitePage
//
//	INSERT INTO website_page (
//	    customer_id, website_id, url, sha_256
//	) VALUES (
//	    $1, $2, $3, $4
//	)
//	ON CONFLICT ON CONSTRAINT cnst_unique_website_page
//	DO UPDATE SET
//	    updated_at = CURRENT_TIMESTAMP,
//	    is_valid = TRUE
//	RETURNING id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at
func (q *Queries) CreateWebsitePage(ctx context.Context, arg *CreateWebsitePageParams) (*WebsitePage, error) {
	row := q.db.QueryRow(ctx, createWebsitePage,
		arg.CustomerID,
		arg.WebsiteID,
		arg.Url,
		arg.Sha256,
	)
	var i WebsitePage
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.WebsiteID,
		&i.Url,
		&i.Sha256,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createWebsitePageVector = `-- name: CreateWebsitePageVector :one
INSERT INTO website_page_vector (
    website_page_id, vector_store_id, customer_id, index
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, website_page_id, vector_store_id, customer_id, index, created_at
`

type CreateWebsitePageVectorParams struct {
	WebsitePageID uuid.UUID `db:"website_page_id" json:"websitePageId"`
	VectorStoreID uuid.UUID `db:"vector_store_id" json:"vectorStoreId"`
	CustomerID    uuid.UUID `db:"customer_id" json:"customerId"`
	Index         int32     `db:"index" json:"index"`
}

// CreateWebsitePageVector
//
//	INSERT INTO website_page_vector (
//	    website_page_id, vector_store_id, customer_id, index
//	) VALUES (
//	    $1, $2, $3, $4
//	)
//	RETURNING id, website_page_id, vector_store_id, customer_id, index, created_at
func (q *Queries) CreateWebsitePageVector(ctx context.Context, arg *CreateWebsitePageVectorParams) (*WebsitePageVector, error) {
	row := q.db.QueryRow(ctx, createWebsitePageVector,
		arg.WebsitePageID,
		arg.VectorStoreID,
		arg.CustomerID,
		arg.Index,
	)
	var i WebsitePageVector
	err := row.Scan(
		&i.ID,
		&i.WebsitePageID,
		&i.VectorStoreID,
		&i.CustomerID,
		&i.Index,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

// DeleteCustomer
//
//	DELETE FROM customer
//	WHERE id = $1
func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const deleteDocumentsOlderThan = `-- name: DeleteDocumentsOlderThan :exec
DELETE FROM document
WHERE customer_id = $1
AND updated_at < $2
`

type DeleteDocumentsOlderThanParams struct {
	CustomerID uuid.UUID          `db:"customer_id" json:"customerId"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

// DeleteDocumentsOlderThan
//
//	DELETE FROM document
//	WHERE customer_id = $1
//	AND updated_at < $2
func (q *Queries) DeleteDocumentsOlderThan(ctx context.Context, arg *DeleteDocumentsOlderThanParams) error {
	_, err := q.db.Exec(ctx, deleteDocumentsOlderThan, arg.CustomerID, arg.UpdatedAt)
	return err
}

const deleteFoldersOlderThan = `-- name: DeleteFoldersOlderThan :exec
DELETE FROM folder
WHERE customer_id = $1
AND updated_at < $2
`

type DeleteFoldersOlderThanParams struct {
	CustomerID uuid.UUID          `db:"customer_id" json:"customerId"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

// DeleteFoldersOlderThan
//
//	DELETE FROM folder
//	WHERE customer_id = $1
//	AND updated_at < $2
func (q *Queries) DeleteFoldersOlderThan(ctx context.Context, arg *DeleteFoldersOlderThanParams) error {
	_, err := q.db.Exec(ctx, deleteFoldersOlderThan, arg.CustomerID, arg.UpdatedAt)
	return err
}

const deleteWebsitePagesNotValid = `-- name: DeleteWebsitePagesNotValid :exec
DELETE FROM website_page
WHERE customer_id = $1
AND website_id = $2
AND is_valid = FALSE
`

type DeleteWebsitePagesNotValidParams struct {
	CustomerID uuid.UUID `db:"customer_id" json:"customerId"`
	WebsiteID  uuid.UUID `db:"website_id" json:"websiteId"`
}

// DeleteWebsitePagesNotValid
//
//	DELETE FROM website_page
//	WHERE customer_id = $1
//	AND website_id = $2
//	AND is_valid = FALSE
func (q *Queries) DeleteWebsitePagesNotValid(ctx context.Context, arg *DeleteWebsitePagesNotValidParams) error {
	_, err := q.db.Exec(ctx, deleteWebsitePagesNotValid, arg.CustomerID, arg.WebsiteID)
	return err
}

const deleteWebsitePagesOlderThan = `-- name: DeleteWebsitePagesOlderThan :exec
DELETE FROM website_page
WHERE customer_id = $1
AND updated_at < $2
`

type DeleteWebsitePagesOlderThanParams struct {
	CustomerID uuid.UUID          `db:"customer_id" json:"customerId"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

// DeleteWebsitePagesOlderThan
//
//	DELETE FROM website_page
//	WHERE customer_id = $1
//	AND updated_at < $2
func (q *Queries) DeleteWebsitePagesOlderThan(ctx context.Context, arg *DeleteWebsitePagesOlderThanParams) error {
	_, err := q.db.Exec(ctx, deleteWebsitePagesOlderThan, arg.CustomerID, arg.UpdatedAt)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, datastore, created_at, updated_at FROM customer
WHERE id = $1 LIMIT 1
`

// GetCustomer
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCustomerByName = `-- name: GetCustomerByName :one
SELECT id, name, datastore, created_at, updated_at FROM customer
WHERE name = $1 LIMIT 1
`

// GetCustomerByName
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	WHERE name = $1 LIMIT 1
func (q *Queries) GetCustomerByName(ctx context.Context, name string) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByName, name)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Datastore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE id = $1 LIMIT 1
`

// GetDocument
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetDocument(ctx context.Context, id uuid.UUID) (*Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDocumentsByCustomer = `-- name: GetDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE customer_id = $1 AND validated = true
`

// GetDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE customer_id = $1 AND validated = true
func (q *Queries) GetDocumentsByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsFromParent = `-- name: GetDocumentsFromParent :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE parent_id = $1 AND validated = true
`

// GetDocumentsFromParent
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE parent_id = $1 AND validated = true
func (q *Queries) GetDocumentsFromParent(ctx context.Context, parentID pgtype.UUID) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsFromParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsOlderThan = `-- name: GetDocumentsOlderThan :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE customer_id = $1
AND updated_at < $2
`

type GetDocumentsOlderThanParams struct {
	CustomerID uuid.UUID          `db:"customer_id" json:"customerId"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

// GetDocumentsOlderThan
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE customer_id = $1
//	AND updated_at < $2
func (q *Queries) GetDocumentsOlderThan(ctx context.Context, arg *GetDocumentsOlderThanParams) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsOlderThan, arg.CustomerID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFolder = `-- name: GetFolder :one
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE id = $1 LIMIT 1
`

// GetFolder
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetFolder(ctx context.Context, id uuid.UUID) (*Folder, error) {
	row := q.db.QueryRow(ctx, getFolder, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFolderWithName = `-- name: GetFolderWithName :one
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1 AND title = $2
LIMIT 1
`

type GetFolderWithNameParams struct {
	CustomerID uuid.UUID `db:"customer_id" json:"customerId"`
	Title      string    `db:"title" json:"title"`
}

// GetFolderWithName
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1 AND title = $2
//	LIMIT 1
func (q *Queries) GetFolderWithName(ctx context.Context, arg *GetFolderWithNameParams) (*Folder, error) {
	row := q.db.QueryRow(ctx, getFolderWithName, arg.CustomerID, arg.Title)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFoldersByCustomer = `-- name: GetFoldersByCustomer :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1
`

// GetFoldersByCustomer
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1
func (q *Queries) GetFoldersByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFoldersFromParent = `-- name: GetFoldersFromParent :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE parent_id = $1
`

// GetFoldersFromParent
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE parent_id = $1
func (q *Queries) GetFoldersFromParent(ctx context.Context, parentID pgtype.UUID) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersFromParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFoldersOlderThan = `-- name: GetFoldersOlderThan :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1
AND updated_at < $2
`

type GetFoldersOlderThanParams struct {
	CustomerID uuid.UUID          `db:"customer_id" json:"customerId"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

// GetFoldersOlderThan
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1
//	AND updated_at < $2
func (q *Queries) GetFoldersOlderThan(ctx context.Context, arg *GetFoldersOlderThanParams) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getFoldersOlderThan, arg.CustomerID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootDocumentsByCustomer = `-- name: GetRootDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE customer_id = $1 AND parent_id is NULL
`

// GetRootDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE customer_id = $1 AND parent_id is NULL
func (q *Queries) GetRootDocumentsByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getRootDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootFoldersByCustomer = `-- name: GetRootFoldersByCustomer :many
SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
WHERE customer_id = $1 AND parent_id IS NULL
`

// GetRootFoldersByCustomer
//
//	SELECT id, parent_id, customer_id, title, created_at, updated_at FROM folder
//	WHERE customer_id = $1 AND parent_id IS NULL
func (q *Queries) GetRootFoldersByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, getRootFoldersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenUsage = `-- name: GetTokenUsage :many
SELECT id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at FROM token_usage
WHERE customer_id = $1
`

// GetTokenUsage
//
//	SELECT id, customer_id, model, input_tokens, output_tokens, total_tokens, created_at FROM token_usage
//	WHERE customer_id = $1
func (q *Queries) GetTokenUsage(ctx context.Context, customerID uuid.UUID) ([]*TokenUsage, error) {
	rows, err := q.db.Query(ctx, getTokenUsage, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TokenUsage{}
	for rows.Next() {
		var i TokenUsage
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Model,
			&i.InputTokens,
			&i.OutputTokens,
			&i.TotalTokens,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnvalidatedDocumentsByCustomer = `-- name: GetUnvalidatedDocumentsByCustomer :many
SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
WHERE customer_id = $1 AND validated = false
`

// GetUnvalidatedDocumentsByCustomer
//
//	SELECT id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at FROM document
//	WHERE customer_id = $1 AND validated = false
func (q *Queries) GetUnvalidatedDocumentsByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getUnvalidatedDocumentsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsite = `-- name: GetWebsite :one
SELECT id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at FROM website
WHERE id = $1
`

// GetWebsite
//
//	SELECT id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at FROM website
//	WHERE id = $1
func (q *Queries) GetWebsite(ctx context.Context, id uuid.UUID) (*Website, error) {
	row := q.db.QueryRow(ctx, getWebsite, id)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Protocol,
		&i.Domain,
		&i.Blacklist,
		&i.Whitelist,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWebsitePagesBySite = `-- name: GetWebsitePagesBySite :many
SELECT id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at FROM website_page
WHERE website_id = $1
`

// GetWebsitePagesBySite
//
//	SELECT id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at FROM website_page
//	WHERE website_id = $1
func (q *Queries) GetWebsitePagesBySite(ctx context.Context, websiteID uuid.UUID) ([]*WebsitePage, error) {
	rows, err := q.db.Query(ctx, getWebsitePagesBySite, websiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WebsitePage{}
	for rows.Next() {
		var i WebsitePage
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.WebsiteID,
			&i.Url,
			&i.Sha256,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsitesByCustomer = `-- name: GetWebsitesByCustomer :many
SELECT id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at FROM website
WHERE customer_id = $1
`

// GetWebsitesByCustomer
//
//	SELECT id, customer_id, protocol, domain, blacklist, whitelist, created_at, updated_at FROM website
//	WHERE customer_id = $1
func (q *Queries) GetWebsitesByCustomer(ctx context.Context, customerID uuid.UUID) ([]*Website, error) {
	rows, err := q.db.Query(ctx, getWebsitesByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Website{}
	for rows.Next() {
		var i Website
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Protocol,
			&i.Domain,
			&i.Blacklist,
			&i.Whitelist,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, datastore, created_at, updated_at FROM customer
ORDER BY name
`

// ListCustomers
//
//	SELECT id, name, datastore, created_at, updated_at FROM customer
//	ORDER BY name
func (q *Queries) ListCustomers(ctx context.Context) ([]*Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Datastore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocumentVectors = `-- name: ListDocumentVectors :many
SELECT id, document_id, vector_store_id, customer_id, index, created_at FROM document_vector
WHERE customer_id = $1
`

// ListDocumentVectors
//
//	SELECT id, document_id, vector_store_id, customer_id, index, created_at FROM document_vector
//	WHERE customer_id = $1
func (q *Queries) ListDocumentVectors(ctx context.Context, customerID uuid.UUID) ([]*DocumentVector, error) {
	rows, err := q.db.Query(ctx, listDocumentVectors, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*DocumentVector{}
	for rows.Next() {
		var i DocumentVector
		if err := rows.Scan(
			&i.ID,
			&i.DocumentID,
			&i.VectorStoreID,
			&i.CustomerID,
			&i.Index,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebsitePageVectors = `-- name: ListWebsitePageVectors :many
SELECT id, website_page_id, vector_store_id, customer_id, index, created_at FROM website_page_vector
WHERE customer_id = $1
`

// ListWebsitePageVectors
//
//	SELECT id, website_page_id, vector_store_id, customer_id, index, created_at FROM website_page_vector
//	WHERE customer_id = $1
func (q *Queries) ListWebsitePageVectors(ctx context.Context, customerID uuid.UUID) ([]*WebsitePageVector, error) {
	rows, err := q.db.Query(ctx, listWebsitePageVectors, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WebsitePageVector{}
	for rows.Next() {
		var i WebsitePageVector
		if err := rows.Scan(
			&i.ID,
			&i.WebsitePageID,
			&i.VectorStoreID,
			&i.CustomerID,
			&i.Index,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDocumentAsUploaded = `-- name: MarkDocumentAsUploaded :one
UPDATE document
SET validated = true
WHERE id = $1
RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at
`

// MarkDocumentAsUploaded
//
//	UPDATE document
//	SET validated = true
//	WHERE id = $1
//	RETURNING id, parent_id, customer_id, filename, type, size_bytes, sha_256, validated, created_at, updated_at
func (q *Queries) MarkDocumentAsUploaded(ctx context.Context, id uuid.UUID) (*Document, error) {
	row := q.db.QueryRow(ctx, markDocumentAsUploaded, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.CustomerID,
		&i.Filename,
		&i.Type,
		&i.SizeBytes,
		&i.Sha256,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const queryVectorStoreDocuments = `-- name: QueryVectorStoreDocuments :many
SELECT d.id, d.parent_id, d.customer_id, d.filename, d.type, d.size_bytes, d.sha_256, d.validated, d.created_at, d.updated_at
FROM vector_store vs
JOIN document_vector dv ON vs.id = dv.vector_store_id
JOIN document d ON d.id = dv.document_id
WHERE vs.customer_id = $1
ORDER BY vs.embeddings <#> $3
LIMIT $2
`

type QueryVectorStoreDocumentsParams struct {
	CustomerID uuid.UUID       `db:"customer_id" json:"customerId"`
	Limit      int32           `db:"limit" json:"limit"`
	Embeddings pgvector.Vector `db:"embeddings" json:"embeddings"`
}

// QueryVectorStoreDocuments
//
//	SELECT d.id, d.parent_id, d.customer_id, d.filename, d.type, d.size_bytes, d.sha_256, d.validated, d.created_at, d.updated_at
//	FROM vector_store vs
//	JOIN document_vector dv ON vs.id = dv.vector_store_id
//	JOIN document d ON d.id = dv.document_id
//	WHERE vs.customer_id = $1
//	ORDER BY vs.embeddings <#> $3
//	LIMIT $2
func (q *Queries) QueryVectorStoreDocuments(ctx context.Context, arg *QueryVectorStoreDocumentsParams) ([]*Document, error) {
	rows, err := q.db.Query(ctx, queryVectorStoreDocuments, arg.CustomerID, arg.Limit, arg.Embeddings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CustomerID,
			&i.Filename,
			&i.Type,
			&i.SizeBytes,
			&i.Sha256,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryVectorStoreRaw = `-- name: QueryVectorStoreRaw :many
SELECT id, raw, embeddings, customer_id, created_at FROM vector_store
WHERE customer_id = $1
ORDER BY embeddings <#> $3
LIMIT $2
`

type QueryVectorStoreRawParams struct {
	CustomerID uuid.UUID       `db:"customer_id" json:"customerId"`
	Limit      int32           `db:"limit" json:"limit"`
	Embeddings pgvector.Vector `db:"embeddings" json:"embeddings"`
}

// QueryVectorStoreRaw
//
//	SELECT id, raw, embeddings, customer_id, created_at FROM vector_store
//	WHERE customer_id = $1
//	ORDER BY embeddings <#> $3
//	LIMIT $2
func (q *Queries) QueryVectorStoreRaw(ctx context.Context, arg *QueryVectorStoreRawParams) ([]*VectorStore, error) {
	rows, err := q.db.Query(ctx, queryVectorStoreRaw, arg.CustomerID, arg.Limit, arg.Embeddings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*VectorStore{}
	for rows.Next() {
		var i VectorStore
		if err := rows.Scan(
			&i.ID,
			&i.Raw,
			&i.Embeddings,
			&i.CustomerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryVectorStoreWebsitePages = `-- name: QueryVectorStoreWebsitePages :many
SELECT wp.id, wp.customer_id, wp.website_id, wp.url, wp.sha_256, wp.is_valid, wp.created_at, wp.updated_at
FROM vector_store vs
JOIN website_page_vector wpv ON vs.id = wpv.vector_store_id
JOIN website_page wp ON wp.id = wpv.website_page_id
WHERE vs.customer_id = $1
ORDER BY vs.embeddings <#> $3
LIMIT $2
`

type QueryVectorStoreWebsitePagesParams struct {
	CustomerID uuid.UUID       `db:"customer_id" json:"customerId"`
	Limit      int32           `db:"limit" json:"limit"`
	Embeddings pgvector.Vector `db:"embeddings" json:"embeddings"`
}

// QueryVectorStoreWebsitePages
//
//	SELECT wp.id, wp.customer_id, wp.website_id, wp.url, wp.sha_256, wp.is_valid, wp.created_at, wp.updated_at
//	FROM vector_store vs
//	JOIN website_page_vector wpv ON vs.id = wpv.vector_store_id
//	JOIN website_page wp ON wp.id = wpv.website_page_id
//	WHERE vs.customer_id = $1
//	ORDER BY vs.embeddings <#> $3
//	LIMIT $2
func (q *Queries) QueryVectorStoreWebsitePages(ctx context.Context, arg *QueryVectorStoreWebsitePagesParams) ([]*WebsitePage, error) {
	rows, err := q.db.Query(ctx, queryVectorStoreWebsitePages, arg.CustomerID, arg.Limit, arg.Embeddings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WebsitePage{}
	for rows.Next() {
		var i WebsitePage
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.WebsiteID,
			&i.Url,
			&i.Sha256,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setWebsitePagesNotValid = `-- name: SetWebsitePagesNotValid :exec
UPDATE website_page SET is_valid = FALSE
WHERE customer_id = $1
AND website_id = $2
`

type SetWebsitePagesNotValidParams struct {
	CustomerID uuid.UUID `db:"customer_id" json:"customerId"`
	WebsiteID  uuid.UUID `db:"website_id" json:"websiteId"`
}

// SetWebsitePagesNotValid
//
//	UPDATE website_page SET is_valid = FALSE
//	WHERE customer_id = $1
//	AND website_id = $2
func (q *Queries) SetWebsitePagesNotValid(ctx context.Context, arg *SetWebsitePagesNotValidParams) error {
	_, err := q.db.Exec(ctx, setWebsitePagesNotValid, arg.CustomerID, arg.WebsiteID)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
    set name = $2
WHERE id = $1
RETURNING id, name, datastore, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Name string    `db:"name" json:"name"`
}

// UpdateCustomer
//
//	UPDATE customer
//	    set name = $2
//	WHERE id = $1
//	RETURNING id, name, datastore, created_at, updated_at
func (q *Queries) UpdateCustomer(ctx context.Context, arg *UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer, arg.ID, arg.Name)
	return err
}

const updateWebsitePageSignature = `-- name: UpdateWebsitePageSignature :one
UPDATE website_page SET
    sha_256 = $2
WHERE id = $1
RETURNING id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at
`

type UpdateWebsitePageSignatureParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	Sha256 string    `db:"sha_256" json:"sha256"`
}

// UpdateWebsitePageSignature
//
//	UPDATE website_page SET
//	    sha_256 = $2
//	WHERE id = $1
//	RETURNING id, customer_id, website_id, url, sha_256, is_valid, created_at, updated_at
func (q *Queries) UpdateWebsitePageSignature(ctx context.Context, arg *UpdateWebsitePageSignatureParams) (*WebsitePage, error) {
	row := q.db.QueryRow(ctx, updateWebsitePageSignature, arg.ID, arg.Sha256)
	var i WebsitePage
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.WebsiteID,
		&i.Url,
		&i.Sha256,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
